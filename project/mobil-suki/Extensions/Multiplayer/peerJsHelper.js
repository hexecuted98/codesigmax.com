var gdjs;(function(m){const l=new m.Logger("Multiplayer");let j;(function(n){const I=e=>typeof e=="object"&&e!==null&&typeof e.messageName=="string"&&typeof e.data=="object";class A{constructor(t,s){this.data=t,this.sender=s}getData(){return this.data}getSender(){return this.sender}}n.MessageData=A;class L{constructor(t){this.data=[];this.messageName=t}getName(){return this.messageName}getMessages(){return this.data}pushMessage(t,s){this.data.push(new A(t,s))}}n.MessagesList=L;let o={debug:1},r=null;const p=new Map,h=new Map;let y=!1,S=null;const M=[],D=[];let u="none";n.setCompressionMethod=e=>{u=e};async function O(e){if(u==="none")return JSON.stringify(e);const t=u==="cs:gzip"?"gzip":"deflate",s=JSON.stringify(e),i=new TextEncoder().encode(s),g=new CompressionStream(t),f=g.writable.getWriter();f.write(i),f.close();const N=g.readable.getReader(),b=[];for(;;){const{done:d,value:x}=await N.read();if(d)break;b.push(x)}return new Uint8Array(b.reduce((d,x)=>d.concat(Array.from(x)),[]))}async function U(e){if(u==="none"){if(typeof e!="string"){l.error(`Error while parsing message using compressionMethod ${u}: received data is not a string.`);return}try{return JSON.parse(e)}catch(c){l.error(`Error while parsing message: ${c.toString()}`);return}}const t=u==="cs:gzip"?"gzip":"deflate",s=new DecompressionStream(t),a=s.writable.getWriter();a.write(e),a.close();const g=s.readable.getReader(),f=[];for(;;){const{done:c,value:d}=await g.read();if(c)break;f.push(d)}const k=new Uint8Array(f.reduce((c,d)=>c.concat(Array.from(d)),[])),b=new TextDecoder().decode(k);try{return JSON.parse(b)}catch(c){l.error(`Error while parsing message: ${c.toString()}`);return}}n.getOrCreateMessagesList=e=>{const t=h.get(e);if(t)return t;const s=new L(e);return h.set(e,s),s};const R=()=>{y=!0,S&&(n.connect(S),S=null)},v=e=>{p.set(e.peer,e),e.on("data",async t=>{if(I(t)){const s=n.getOrCreateMessagesList(t.messageName),a=e.peer,i=await U(t.data);if(!i)return;s.pushMessage(i,a)}}),e.on("error",()=>{w(e.peer)}),e.on("close",()=>{w(e.peer)}),e.on("iceStateChanged",t=>{t==="disconnected"&&w(e.peer)}),function t(){e.peerConnection&&(e.peerConnection.connectionState==="failed"||e.peerConnection.connectionState==="disconnected"||e.peerConnection.connectionState==="closed")?w(e.peer):setTimeout(t,1e3)}()},w=e=>{!p.has(e)||(M.push(e),p.delete(e))},C=(e={})=>{r===null&&(r=new Peer(o),r.on("open",()=>{R()}),r.on("error",t=>{e.onPeerUnavailable&&t.type==="peer-unavailable"?(l.error("Peer is unavailable."),e.onPeerUnavailable()):l.error(`PeerJS error (${t.type||"unknown"}):`,t)}),r.on("connection",t=>{t.on("open",()=>{v(t),D.push(t.peer)})}),r.on("close",()=>{r=null,C(e)}),r.on("disconnected",r.reconnect))};n.useDefaultBrokerServer=C,n.connect=e=>{if(r===null||!y){S=e;return}const t=r.connect(e);t.on("open",()=>{v(t)})},n.disconnectFromAllPeers=()=>{for(const e of p.values())e.close()},n.sendDataTo=async(e,t,s)=>{if(!e.length)return;const a=await O(s);for(const i of e){const g=p.get(i);g&&g.send({messageName:t,data:a})}},n.getAllMessagesMap=()=>h,n.useCustomBrokerServer=(e,t,s,a,i,g={})=>{Object.assign(o,{host:e,port:t,path:s,secure:i,key:a.length===0?"peerjs":a}),C(g)},n.useCustomICECandidate=(e,t,s)=>{o.config=o.config||{},o.config.iceServers=o.config.iceServers||[],o.config.iceServers.push({urls:e,username:t,credential:s})},n.forceUseRelayServer=e=>{o.config=o.config||{},o.config.iceTransportPolicy=e?"relay":"all"},n.getCurrentId=()=>r===null?"":r.id,n.isReady=()=>y,n.getJustDisconnectedPeers=()=>M,n.getAllPeers=()=>Array.from(p.keys()),m.callbacksRuntimeScenePostEvents.push(()=>{for(const e of h.values())e.getMessages().length=0;M.length>0&&(M.length=0),D.length>0&&(D.length=0)})})(j=m.multiplayerPeerJsHelper||(m.multiplayerPeerJsHelper={}))})(gdjs||(gdjs={}));
//# sourceMappingURL=peerJsHelper.js.map
